import { askContact } from "../keyboards/askContactKeyboard.js";
import { toMainMenuKeyboard } from "../keyboards/toMainMenuKeyboard.js";
import { delay, isValidCardNumber } from "../services.js";
import { skipKeyboard } from "../keyboards/skipKeyboard.js";
import { updateStartInfo } from "../db.js";

const handleInfo = async (ctx, { fio, cardNumber, phoneNumber }) => {
	const isValidCard = isValidCardNumber(cardNumber);
	if (isValidCard === true) {
		await ctx.reply(
			"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\\. –í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ",
			{ reply_markup: toMainMenuKeyboard() },
		);
		await updateStartInfo({
			tg_id: ctx.from.id,
			bankCard: cardNumber,
			phone_number: phoneNumber,
			fio,
		});
	} else {
		await updateStartInfo({
			tg_id: ctx.from.id,
			bankCard: null,
			phone_number: phoneNumber,
			fio,
		});
		if (isValidCard == "canceled") {
			return await ctx.reply(
				"–í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ __–ü—Ä–æ—Ñ–∏–ª—å__",
				{
					reply_markup: toMainMenuKeyboard(),
				},
			);
		} else {
			await ctx.reply(
				"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\\. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ",
				{ reply_markup: toMainMenuKeyboard() },
			);
		}
	}
};

const askPhone = async (conversation, ctx) => {
	let i = 0;
	while (true) {
		if (i > 0) {
			await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π üëá ", {
				reply_markup: askContact,
			});
		}
		const phoneCtx = await conversation.wait();
		const phoneNumber = phoneCtx.message?.contact?.phone_number;
		if (!phoneNumber) {
			i++;
			continue;
		}
		return phoneNumber;
	}
};

export const startConversation = async (conversation, ctx) => {
	const beginning = await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –§–ò–û");
	const fioCtx = await conversation.wait();
	const fio = fioCtx.message?.text;
	if (!fio) {
		fioCtx.msg.delete();
		return ctx.reply("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", {
			reply_markup: toMainMenuKeyboard(),
		});
	}
	// console.log(beginning)
	await ctx.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá", {
		reply_markup: askContact,
	});
	// const phoneCtx = await conversation.wait();
	const phoneNumber = await askPhone(conversation, ctx);
	await ctx.reply("–°–ø–∞—Å–∏–±–æ\\! –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", {
		reply_markup: { remove_keyboard: true },
	});
	await delay(3000);
	await ctx.reply(
		"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏",
		{ reply_markup: skipKeyboard },
	);

	const cardCtx = await conversation.wait();
	const cardNumber = cardCtx?.message?.text;
	if (!cardNumber) {
		try {
			cardCtx.msg.delete();
		} catch (error) {}
		await ctx.api.answerCallbackQuery(cardCtx.update.callback_query.id);
	}
	await handleInfo(ctx, { cardNumber, phoneNumber, fio });
	// await ctx.api.deleteMessage(beginning.chat.id, beginning.message_id)
};
